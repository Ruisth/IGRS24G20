# $Id$
#
# Ficheiro de Configuração do Kamailio

# ------------------ Identificação dos Módulos ------------------

debug=2            # debug level
fork=yes
children=1
log_stderror=yes
listen=127.0.0.1:5060

# Path dos módulos
mpath="/usr/lib/x86_64-linux-gnu/kamailio/modules/"

# Carregar módulos deste projecto
loadmodule "tm"
loadmodule "rr"
loadmodule "usrloc"
loadmodule "registrar"
loadmodule "sl"
loadmodule "pv"
loadmodule "textops"
loadmodule "app_python3"  # Python3
loadmodule "uac"
loadmodule "permissions"  # Para Autenticação por PIN
loadmodule "dialog"       # Para monitorização de chamada
loadmodule "acct"         # Para as métricas

modparam("usrloc", "preload", "location")
modparam("app_python3", "load", "app-python.py")
modparam("uac", "reg_contact_addr", "127.0.0.1:5060")
modparam("permissions", "uri", "sip:validar@acme.pt") # Para verificação do PIN
modparam("permissions", "default_pin", "0000")  # PIN por Padrão 0000
cfgengine "python"

# ------------------ Routing ------------------

request_route {
    xlog("L_INFO", "Pedido recebido ($rm) de ($fu) e R-URI ($ru)\n");

    # Gerir Pedidos de Registo
    if (method == "REGISTER") {
        if ($tu !~ "@acme.pt") {
            sl_send_reply("403", "Proibido");
            exit;
        }

        xlog("L_INFO", "REGISTER com AoR ($tu) e Contacto ($ct)\n");
        save("location");
        exit;
    }

    # Gerir pedidos de INVITE
    if (method == "INVITE") {
        if ($tu !~ "@acme.pt") {
            sl_send_reply("403", "Proibido");
            exit;
        }

        if (!lookup("location")) {
            sl_send_reply("404", "Não encontrado");
            exit;
        }

        xlog("L_INFO", "INVITE from ($fu) to ($tu)\n");

        # Verificar se o utilizador está ocupado ou em conferencia
        if (is_busy($tu)) {
            # Redireccionar para o servidor Busy
            rewritehostport("127.0.0.1:5080");
            sl_send_reply("180", "A tocar");
            exit;
        }

        if (is_in_conference($tu)) {
            # Redireccionar para o servidor de anúncio da conferencia
            rewritehostport("127.0.0.1:5080");
            sl_send_reply("180", "A tocar");
            exit;
        }

        forward();
    }

    # Assegurar Mensagem SIP / Pin de Verificação
    if (method == "MESSAGE" && $ru == "sip:validar@acme.pt") {
        if ($body == "0000") {
            sl_send_reply("200", "OK");
        } else {
            sl_send_reply("403", "Invalid PIN");
        }
        exit;
    }

    # Assegurar o pedido de conferencia
    if (method == "INVITE" && $tu == "sip:conferencia@acme.pt") {
        rewritehostport("127.0.0.1:5090");
        sl_send_reply("180", "A tocar");
        exit;
    }

    # Default routing
    forward();
}

onreply_route {
    if (t_check_trans()) {
        xlog("L_INFO", "resposta - a uma transacção existente\n");
    }
    xlog("L_INFO", "($rs) Resposta ao pedido de ($fu)\n");
}

# ------------------ Monitorização ------------------

# GNM métricas do serviço
route[PERFORMANCE_METRICS] {
    if (method == "MESSAGE" && $fu == "sip:gestor@acme.pt" && $body == "Report") {
        xlog("L_INFO", "A gerar o relatório de Performance...\n");

        # Capturar KPIs
        $kpi = "Chamadas atendidas: 100, Conferências realizadas: 20";

        # Enviar relatório para o gestor
        send_reply("200", "Relatório de Performance", "sip:gestor@acme.pt", $kpi);
        exit;
    }
}
