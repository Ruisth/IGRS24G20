####### Configuração do Kamailio SIP Proxy ########
# Adaptado para complementar app-python.py e os requisitos do PBX2.0

####### Configurações Básicas do SIP Proxy #######
listen=udp:0.0.0.0:5060        # Escutar em todas as interfaces para UDP
alias=acme.pt                 # Domínio SIP
port=5060                     # Porta SIP

####### Carregar Módulos Necessários #######
loadmodule "sl.so"            # Respostas sem estado
loadmodule "tm.so"            # Módulo de transações
loadmodule "pv.so"            # Variáveis pseudo
loadmodule "registrar.so"     # Módulo de registo
loadmodule "usrloc.so"        # Base de dados de localização de utilizadores
loadmodule "siputils.so"      # Utilitários SIP (verificações de URI, cabeçalhos)
loadmodule "textops.so"       # Operações de texto (manipular corpo de mensagens)
loadmodule "app_python.so"    # Integração com Python
loadmodule "dialog.so"        # Gestão de diálogos para monitorização do estado das chamadas

####### Parâmetros dos Módulos #######
# Parâmetros do Módulo de Registo
modparam("registrar", "method_filtering", 1)  # Permitir apenas métodos REGISTER

# Parâmetros da Base de Dados de Localização
modparam("usrloc", "db_mode", 0)             # Armazenamento de localização em memória

# Parâmetros do Módulo Python
modparam("app_python", "load", "app-python.py")

# Parâmetros do Módulo de Transações
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 30)

# Parâmetros do Módulo de Diálogo
modparam("dialog", "db_mode", 0)             # Armazenamento de diálogos em memória

####### Configurações Globais #######
# Depuração/Registo
log_stderror=yes
log_level=3

default_forward_uri="sip:127.0.0.1:5080"     # URI de reencaminhamento padrão para anúncios

####### Lógica de Roteamento ########
request_route {
    # Lidar com solicitações REGISTER
    if (method_is("REGISTER")) {
        if (!python_exec("ksr_request_route")) {
            sl_send_reply(403, "Forbidden");
        }
        exit;
    }

    # Lidar com solicitações INVITE
    if (method_is("INVITE")) {
        if (!python_exec("ksr_request_route")) {
            sl_send_reply(500, "Internal Server Error");
        }
        exit;
    }

    # Lidar com solicitações MESSAGE (validação de PIN ou pedidos de KPI)
    if (method_is("MESSAGE")) {
        if (!python_exec("ksr_request_route")) {
            sl_send_reply(400, "Bad Request");
        }
        exit;
    }

    # Passar outros métodos (ACK, CANCEL, BYE) para a lógica Python
    if (method_is("ACK|CANCEL|BYE")) {
        if (!python_exec("ksr_request_route")) {
            sl_send_reply(500, "Internal Server Error");
        }
        exit;
    }

    # Resposta padrão para métodos não suportados
    sl_send_reply(405, "Method Not Allowed");
}

####### Rota para Falhas ########
failure_route {
    xlog("L_ERR", "[PBX2.0] Pedido falhou: $T_req.method de $fu para $tu\n");
    if (!python_exec("ksr_failure_route_INVITE")) {
        sl_send_reply(500, "Internal Server Error");
    }
    exit;
}

####### Rotas Adicionais ########
reply_route {
    python_exec("ksr_reply_route");
    exit;
}

onsend_route {
    python_exec("ksr_onsend_route");
    exit;
}
